//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by Francis Young on 18/06/2016.
//  Copyright Â© 2016 Francis Young. All rights reserved.
//

import UIKit
import Messages
import CoreMotion


class MessagesViewController: MSMessagesAppViewController, shareData {
    
    var currentDisplayedController: UIViewControllerWithPedoHandler?
    var pedometerHandler: PedometerHandler?
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
        
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        super.willBecomeActive(with: conversation)

        if pedometerHandler == nil {
            pedometerHandler = PedometerHandler()
        }
        
        // Use this method to configure the extension and restore previously stored state.
        presentViewController(for: conversation, with: presentationStyle)
    }
    
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        
        // Called before the extension transitions to a new presentation style.
        guard let conversation = activeConversation else { fatalError("Expected an active converstation") }

        // Use this method to prepare for the change in presentation style.
        presentViewController(for: conversation, with: presentationStyle)

    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
    
    
    private func presentViewController(for conversation: MSConversation, with presentationStyle: MSMessagesAppPresentationStyle) {
        // Determine the controller to present.
        
        if presentationStyle == .compact {
            // Show a list of previously created ice creams.
            currentDisplayedController = instantiateStepsOverviewViewController()
        } else {
            currentDisplayedController = instantiateCompareStepsViewController()
        }
        
        // Remove any existing child controllers.
        for child in childViewControllers {
            child.willMove(toParentViewController: nil)
            child.view.removeFromSuperview()
            child.removeFromParentViewController()
        }
        
        // Embed the new controller.
        addChildViewController(currentDisplayedController!)
        
        currentDisplayedController!.view.frame = view.bounds
        currentDisplayedController!.view.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(currentDisplayedController!.view)

        currentDisplayedController!.view.leftAnchor.constraint(equalTo: view.leftAnchor).isActive = true
        currentDisplayedController!.view.rightAnchor.constraint(equalTo: view.rightAnchor).isActive = true
        currentDisplayedController!.view.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
        currentDisplayedController!.view.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
        
        currentDisplayedController!.didMove(toParentViewController: self)
        
        currentDisplayedController!.updateSteps()
    }
    
    func shareMessage() {
        //Share message!!
    }
    
    private func instantiateStepsOverviewViewController() -> StepsOverviewViewController {
        
        guard let controller = storyboard?.instantiateViewController(withIdentifier: StepsOverviewViewController.storyboardIdentifier) as? StepsOverviewViewController else { fatalError("Unable to instantiate an StepsOverviewViewController from the storyboard") }
        
        controller.pedometerHandler = pedometerHandler
        pedometerHandler?.parent = controller
        controller.parentController = self
        
        return controller
    }
    
    private func instantiateCompareStepsViewController() -> CompareStepsViewController {

        guard let controller = storyboard?.instantiateViewController(withIdentifier: CompareStepsViewController.storyboardIdentifier) as? CompareStepsViewController else { fatalError("Unable to instantiate a CompareStepsViewController from the storyboard") }
        
        controller.pedometerHandler = pedometerHandler
        pedometerHandler?.parent = controller
        controller.parentController = self
        
        //must call updateSteps()
        
        
        
        return controller
    }

}

protocol shareData {
    func shareMessage()
}
